map = {2,1,2,1,1,1,
2,4,1,3,3,4,
3,2,3,4,2,1,
2,1,4,1,1,4,
2,3,2,3,2,4,
3,4,3,4,3,4,
}

map = {
3,3,3,2,3,2, 3,2,3,2,3,2,
4,1,2,1,4,2, 4,3,4,3,4,2,
3,4,2,3,4,2, 4,1,2,1,1,2,
4,1,3,4,2,1, 3,4,3,2,4,1,
3,4,2,1,3,2, 4,2,1,3,3,2,
4,1,1,4,1,3, 4,2,4,1,1,1,

3,3,3,2,4,2, 1,3,2,3,3,2,
4,1,1,3,4,2, 4,1,3,4,2,1,
3,2,4,1,2,1, 3,4,2,1,3,2,
4,3,3,4,3,2, 4,2,1,4,2,1,
4,2,1,2,1,2, 4,2,3,4,3,2,
4,1,4,1,4,1, 4,1,4,1,1,1,
}

map_ext = {}

n = math.sqrt(#map)
nn = n * 2

for i = 0, n - 1 do
	for j = 1, n do
		map_ext[i * nn + j] = map[(n - 1 - i) * n + (n + 1 - j)]
		if map_ext[i * nn + j] == 1 or map_ext[i * nn + j] == 3 then
			map_ext[i * nn + j] = 4 - map_ext[i * nn + j]
		end
--		io.write(map[i * n + j], ",")
	end
--	io.write("\n")
end

--io.write("\n")

for i = 0, n - 1 do
	for j = 1, n do
		map_ext[i * nn + j + n] = map[(j - 1) * n + (n - i)]
		map_ext[i * nn + j + n] = 5 - map_ext[i * nn + j + n]
--		io.write(map[i * n + j], ",")
	end
--	io.write("\n")
end

--io.write("\n")

for i = 0, n - 1 do
	for j = 1, n do
		map_ext[(i + n) * nn + j] = map[(n - j) * n + i + 1]
		if map_ext[(i + n) * nn + j] == 1 or map_ext[(i + n) * nn + j] == 3 then
			map_ext[(i + n) * nn + j] = 4 - map_ext[(i + n) * nn + j]
		end
		if map_ext[(i + n) * nn + j] == 2 or map_ext[(i + n) * nn + j] == 4 then
			map_ext[(i + n) * nn + j] = 6 - map_ext[(i + n) * nn + j]
		end
		map_ext[(i + n) * nn + j] = 5 - map_ext[(i + n) * nn + j]
--		io.write(map[i * n + j], ",")
	end
--	io.write("\n")
end

--io.write("\n")

for i = 0, n - 1 do
	for j = 1, n do
		map_ext[(i + n) * nn + j + n] = map[i * n + j]
		if map_ext[(i + n) * nn + j + n] == 2 or map_ext[(i + n) * nn + j + n] == 4 then
			map_ext[(i + n) * nn + j + n] = 6 - map_ext[(i + n) * nn + j + n]
		end
--		io.write(map[i * n + j], ",")
	end
--	io.write("\n")
end

for i = 0, nn - 1 do
	for j = 1, nn do
		io.write(map_ext[i * nn + j], ",", (function () if j == n then return " " else return "" end end)())
	end
	io.write("\n", (function () if i == n - 1 then return "\n" else return "" end end)())
end

io.write("\n\n\n")

for i = nn - 1, 0, -1 do
	for j = 1, nn do
		io.write(map_ext[i * nn + j], ",", (function () if j == n then return " " else return "" end end)())
	end
	io.write("\n", (function () if i == n then return "\n" else return "" end end)())
end

map_ext_con = {
4,1,4,1,4,1, 4,1,4,1,1,1,
4,2,1,2,1,2, 4,2,3,4,3,2,
4,3,3,4,3,2, 4,2,1,4,2,1,
3,2,4,1,2,1, 3,4,2,1,3,2,
4,1,1,3,4,2, 4,1,3,4,2,1,
3,3,3,2,4,2, 1,3,2,3,3,2,

4,1,1,4,1,3, 4,2,4,1,1,1,
3,4,2,1,3,2, 4,2,1,3,3,2,
4,1,3,4,2,1, 3,4,3,2,4,1,
3,4,2,3,4,2, 4,1,2,1,1,2,
4,1,2,1,4,2, 4,3,4,3,4,2,
3,3,3,2,3,2, 3,2,3,2,3,2,
}

map_ext_con = {
3,3,3,4,3,4,3,4,3,4,3,4, 3,3,3,4,3,4,3,4,3,4,3,4,
2,1,4,1,2,4,2,3,2,3,2,4, 2,1,4,1,2,4,2,3,2,3,2,4,
3,2,4,3,2,4,2,1,4,1,1,4, 3,2,4,3,2,4,2,1,4,1,1,4,
2,1,3,2,4,1,3,2,3,4,2,1, 2,1,3,2,4,1,3,2,3,4,2,1,
3,2,4,1,3,4,2,4,1,3,3,4, 3,2,4,1,3,3,2,4,1,3,3,4,
2,1,1,2,1,3,2,4,2,1,1,1, 2,1,1,2,1,1,4,1,2,1,1,1,
3,3,3,4,2,4,1,3,4,3,3,4, 3,3,3,4,3,2,3,3,4,3,3,4,
2,1,1,3,2,4,2,1,3,2,4,1, 2,1,1,3,2,4,1,1,3,2,4,1,
3,4,2,1,4,1,3,2,4,1,3,4, 3,4,2,1,4,1,3,2,4,1,3,4,
2,3,3,2,3,4,2,4,1,2,4,1, 2,3,3,2,3,4,2,4,1,2,4,1,
2,4,1,4,1,4,2,4,3,2,3,3, 2,4,1,4,1,4,2,4,3,2,3,4,
2,1,2,1,2,1,2,1,2,1,1,4, 1,4,2,1,2,1,2,1,2,1,1,1,

3,3,3,4,3,4,3,4,3,4,2,4, 2,3,3,4,3,4,3,4,3,4,3,4,
2,1,4,1,2,4,2,3,2,3,2,4, 2,1,4,1,2,4,2,3,2,3,2,4,
3,2,4,3,2,4,2,1,4,1,1,4, 3,2,4,3,2,4,2,1,4,1,1,4,
2,1,3,2,4,1,3,2,3,4,2,1, 2,1,3,2,4,1,3,2,3,4,2,1,
3,2,4,1,3,3,2,4,1,3,3,4, 3,2,4,1,3,4,2,4,1,3,3,4,
2,1,1,2,1,1,4,1,2,1,1,1, 2,1,1,2,1,3,2,4,2,1,1,1,
3,3,3,4,3,2,3,3,4,3,3,4, 3,3,3,4,2,4,1,3,4,3,3,4,
2,1,1,3,2,4,1,1,3,2,4,1, 2,1,1,3,2,4,2,1,3,2,4,1,
3,4,2,1,4,1,3,2,4,1,3,4, 3,4,2,1,4,1,3,2,4,1,3,4,
2,3,3,2,3,4,2,4,1,2,4,1, 2,3,3,2,3,4,2,4,1,2,4,1,
2,4,1,4,1,4,2,4,3,2,3,4, 2,4,1,4,1,4,2,4,3,2,3,4,
2,1,2,1,2,1,2,1,2,1,1,1, 2,1,2,1,2,1,2,1,2,1,1,1,
}

io.write("\n\n\n")

for i = nn - 1, 0, -1 do
	for j = 1, nn do
		io.write(map_ext_con[i * nn + j], ",", (function () if j == n then return " " else return "" end end)())
	end
	io.write("\n", (function () if i == n then return "\n" else return "" end end)())
end

